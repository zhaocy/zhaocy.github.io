<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[apollo配置管理平台编译部署]]></title>
    <url>%2F2017%2F07%2F07%2Fapollo-deploy%2F</url>
    <content type="text"><![CDATA[准备工作 阅读官方文档 修改配置在java环境下部署apollo-configservice1.修改application.yml 修改前： 1234567891011121314spring: application: name: apollo-configservice profiles: active: $&#123;apollo_profile&#125;ctrip: appid: 100003171 server: port: 8080 logging: file: /opt/logs/100003171/apollo-configservice.log 修改后： 123456789101112131415161718spring: application: name: apollo-configservice profiles: active: $&#123;apollo_profile&#125;ctrip: appid: 100003171eureka: instance: ip-address: 192.168.1.32server: port: 8031 logging: file: /opt/logs/100003171/apollo-configservice.log 2.修改bootstrap.yml 修改前： 123456789101112131415161718192021222324eureka: instance: hostname: $&#123;hostname:localhost&#125; preferIpAddress: true server: peerEurekaNodesUpdateIntervalMs: 60000 enableSelfPreservation: false client: serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:8080/eureka/ healthcheck: enabled: true eurekaServiceUrlPollIntervalSeconds: 60endpoints: health: sensitive: falsemanagement: security: enabled: false health: status: order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP 修改后： 123456789101112131415161718192021222324eureka: instance: hostname: $&#123;hostname:localhost&#125; preferIpAddress: true server: peerEurekaNodesUpdateIntervalMs: 60000 enableSelfPreservation: false client: serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:8031/eureka/ healthcheck: enabled: true eurekaServiceUrlPollIntervalSeconds: 60endpoints: health: sensitive: falsemanagement: security: enabled: false health: status: order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP 3.修改configservice.properties 修改前： 12345#Used for apollo-assemblyspring.application.name= apollo-configservicectrip.appid= 100003171server.port= 8080logging.file= /opt/logs/100003171/apollo-configservice.log 修改后： 12345#Used for apollo-assemblyspring.application.name= apollo-configservicectrip.appid= 100003171server.port= 8031logging.file= /opt/logs/100003171/apollo-configservice.log 4.修改scripts/startup.sh 修改前： 123...SERVER_PORT=8080... 修改后： 123...SERVER_PORT=8031... 5.修改eureka地址修改表ApolloConfigDB.ServerConfig，找到Value为的http://localhost:8080/eureka/的记录,修改为configservice所在的IP和端口，例如：http://192.168.1.32:8031/eureka/ ###apollo-adminservice 1.修改application.yml 修改前： 1234567891011121314spring: application: name: apollo-adminservice profiles: active: $&#123;apollo_profile&#125;ctrip: appid: 100003172 server: port: 8090 logging: file: /opt/logs/100003172/apollo-adminservice.log 修改后： 123456789101112131415161718spring: application: name: apollo-adminservice profiles: active: $&#123;apollo_profile&#125;ctrip: appid: 100003172eureka: instance: ip-address: 192.168.1.32server: port: 8032 logging: file: /opt/logs/100003172/apollo-adminservice.log 2.修改bootstrap.yml 修改前： 123456789101112131415161718192021eureka: instance: hostname: $&#123;hostname:localhost&#125; preferIpAddress: true client: serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:8080/eureka/ healthcheck: enabled: true eurekaServiceUrlPollIntervalSeconds: 60endpoints: health: sensitive: falsemanagement: security: enabled: false health: status: order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP 修改后： 123456789101112131415161718192021eureka: instance: hostname: $&#123;hostname:localhost&#125; preferIpAddress: true client: serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:8031/eureka/ healthcheck: enabled: true eurekaServiceUrlPollIntervalSeconds: 60endpoints: health: sensitive: falsemanagement: security: enabled: false health: status: order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP 3.修改文件startup.sh 修改前： 123...SERVER_PORT=8090... 修改后： 123...SERVER_PORT=8032... ##在Docker下部署 #部署 从官方直接更新master分支的代码，在不考虑端口冲突的情况下，初始化数据库脚本和修改数据库链接信息，然后执行/scripts/build.sh编译项目,访问项目是没有问题的。步骤如下： 准备工作：创建数据库,执行官方的sql。 pull master分支代码 编辑build.sh修改数据库连接配置apollo config db info和apollo portal db info，修改完成后执行build.sh。 启动Apollo Config Service和Apollo Admin Service可同时启动。启动配置 #基于Docker部署 可参考分布式部署指南 ##基于Java8环境部署 上传安装包 上传安装包至/usr/tomcat_home/apollo_configservice解压。 运行docker 1.apollo-configservice docker run –name apollo_configservice -p 8031:8031 -v /usr/tomcat_home/apollo_configservice/:/home/ -itd java:8 2.apollo-adminservice docker run –name apollo_adminservice -p 8032:8032 -v /usr/tomcat_home/apollo_adminservice/:/home/ -itd java:8 3.apollo-portal docker run –name apollo_portal -p 8033:8080 -v /usr/tomcat_home/apollo_portal/:/home/ -itd java:8 运行服务 docker exec -it apollo_configservice /bin/bash 进入到scripts ./startup.sh ##打镜像包部署 1.apollo-configservice 修改application.yml 修改后： 1234567891011121314151617181920212223spring: application: name: apollo-configservice profiles: active: $&#123;apollo_profile&#125; cloud: inetutils: ignoredInterfaces: - docker0 - veth.*eureka: instance: ip-address: 192.168.1.32ctrip: appid: 100003171 server: port: 8031 logging: file: /opt/logs/100003171/apollo-configservice.log Dockerfile 1234567891011121314151617FROM java:8-jreMAINTAINER LouisENV VERSION 0.7.0RUN apt-get install unzipADD target/apollo-configservice-$&#123;VERSION&#125;-github.zip /apollo-configservice/apollo-configservice-$&#123;VERSION&#125;-github.zipRUN unzip /apollo-configservice/apollo-configservice-$&#123;VERSION&#125;-github.zip -d /apollo-configservice \ &amp;&amp; rm -rf /apollo-configservice/apollo-configservice-$&#123;VERSION&#125;-github.zip \ &amp;&amp; sed -i '$d' /apollo-configservice/scripts/startup.sh \ &amp;&amp; echo "tail -f /dev/null" &gt;&gt; /apollo-configservice/scripts/startup.shEXPOSE 8031CMD ["/apollo-configservice/scripts/startup.sh"] 编译 docker build -t apollo-configservice . 运行 docker run -d –name apollo-configservice -v /usr/tomcat_home/boss_apollo/:/opt/logs -p 8031:8031 –net=host apollo-configservice 2.apollo-adminservice 修改后： 1234567891011121314151617181920212223spring: application: name: apollo-adminservice profiles: active: $&#123;apollo_profile&#125; cloud: inetutils: ignoredInterfaces: - docker0 - veth.*eureka: instance: ip-address: 192.168.1.32ctrip: appid: 100003172 server: port: 8032 logging: file: /opt/logs/100003172/apollo-adminservice.log Dockerfile 1234567891011121314151617FROM java:8-jreMAINTAINER LouisENV VERSION 0.7.0RUN apt-get install unzipADD target/apollo-adminservice-$&#123;VERSION&#125;-github.zip /apollo-adminservice/apollo-adminservice-$&#123;VERSION&#125;-github.zipRUN unzip /apollo-adminservice/apollo-adminservice-$&#123;VERSION&#125;-github.zip -d /apollo-adminservice \ &amp;&amp; rm -rf /apollo-adminservice/apollo-adminservice-$&#123;VERSION&#125;-github.zip \ &amp;&amp; sed -i '$d' /apollo-adminservice/scripts/startup.sh \ &amp;&amp; echo "tail -f /dev/null" &gt;&gt; /apollo-adminservice/scripts/startup.shEXPOSE 8032CMD ["/apollo-adminservice/scripts/startup.sh"] 编译 docker build -t apollo-adminservice . 运行 docker run -d –name apollo-adminservice -v /usr/tomcat_home/boss_apollo/:/opt/logs -p 8032:8032 –net=host apollo-adminservice 3.apollo-portal Dockerfile FROM java:8-jre MAINTAINER Louis ENV VERSION 0.7.0 RUN apt-get install unzip ADD target/apollo-portal-${VERSION}-github.zip /apollo-portal/apollo-portal-${VERSION}-github.zip RUN unzip /apollo-portal/apollo-portal-${VERSION}-github.zip -d /apollo-portal \ &amp;&amp; rm -rf /apollo-portal/apollo-portal-${VERSION}-github.zip \ &amp;&amp; sed -i '$d' /apollo-portal/scripts/startup.sh \ &amp;&amp; echo "tail -f /dev/null" &gt;&gt; /apollo-portal/scripts/startup.sh EXPOSE 8033 CMD ["/apollo-portal/scripts/startup.sh"] 编译 docker build -t apollo-portal . 运行 docker run -d –name apollo-portal -v /usr/tomcat_home/boss_apollo/:/opt/logs -p 8033:8080 –net=host apollo-portal]]></content>
      <tags>
        <tag>apollo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>